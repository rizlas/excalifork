From 49fc76c9a5c1f61a8b53ddaf9e379cde2ff178d5 Mon Sep 17 00:00:00 2001
From: rizlas <rizlas@users.noreply.github.com>
Date: Tue, 31 Oct 2023 09:33:32 +0100
Subject: [PATCH] feat: alswl and Kiliandeca forks adjustment to adapt to
 v0.16.1 changes

---
 .../@excalidraw/excalidraw/api/constants.mdx  |   2 +-
 excalidraw-app/collab/Collab.tsx              |  26 +-
 .../components/ExportToExcalidrawPlus.tsx     |   7 +-
 excalidraw-app/data/StorageBackend.ts         |  45 +++
 excalidraw-app/data/config.ts                 |  54 ++++
 excalidraw-app/data/firebase.ts               |   4 +-
 excalidraw-app/data/httpStorage.ts            | 290 ++++++++++++++++++
 excalidraw-app/data/index.ts                  |   7 +-
 excalidraw-app/index.tsx                      |  24 +-
 src/actions/actionProperties.tsx              |   2 +-
 src/constants.ts                              |   4 +-
 src/element/newElement.test.ts                |   2 +-
 src/element/textElement.ts                    |   2 +-
 src/element/textWysiwyg.test.tsx              |   6 +-
 src/tests/data/restore.test.ts                |   2 +-
 src/tests/regressionTests.test.tsx            |   4 +-
 src/vite-env.d.ts                             |   2 +
 17 files changed, 443 insertions(+), 40 deletions(-)
 create mode 100644 excalidraw-app/data/StorageBackend.ts
 create mode 100644 excalidraw-app/data/config.ts
 create mode 100644 excalidraw-app/data/httpStorage.ts

diff --git a/dev-docs/docs/@excalidraw/excalidraw/api/constants.mdx b/dev-docs/docs/@excalidraw/excalidraw/api/constants.mdx
index a6c95ab2..1cab32fb 100644
--- a/dev-docs/docs/@excalidraw/excalidraw/api/constants.mdx
+++ b/dev-docs/docs/@excalidraw/excalidraw/api/constants.mdx
@@ -16,7 +16,7 @@ import { FONT_FAMILY } from "@excalidraw/excalidraw";
 | `Helvetica` | The `Normal` Font      |
 | `Cascadia`  | The `Code` Font        |
 
-Defaults to `FONT_FAMILY.Virgil` unless passed in `initialData.appState.currentItemFontFamily`.
+Defaults to `FONT_FAMILY["Virgil, HanziPen SC, KaiTi"]` unless passed in `initialData.appState.currentItemFontFamily`.
 
 ### THEME
 
diff --git a/excalidraw-app/collab/Collab.tsx b/excalidraw-app/collab/Collab.tsx
index 0d57a890..57e552bf 100644
--- a/excalidraw-app/collab/Collab.tsx
+++ b/excalidraw-app/collab/Collab.tsx
@@ -35,13 +35,7 @@ import {
   SocketUpdateDataSource,
   SyncableExcalidrawElement,
 } from "../data";
-import {
-  isSavedToFirebase,
-  loadFilesFromFirebase,
-  loadFromFirebase,
-  saveFilesToFirebase,
-  saveToFirebase,
-} from "../data/firebase";
+import { getStorageBackend, storageBackend } from "../data/config";
 import {
   importUsernameFromLocalStorage,
   saveUsernameToLocalStorage,
@@ -128,7 +122,12 @@ class Collab extends PureComponent<Props, CollabState> {
           throw new AbortError();
         }
 
-        return loadFilesFromFirebase(`files/rooms/${roomId}`, roomKey, fileIds);
+        const storageBackend = await getStorageBackend();
+        return storageBackend.loadFilesFromStorageBackend(
+          `files/rooms/${roomId}`,
+          roomKey,
+          fileIds,
+        );
       },
       saveFiles: async ({ addedFiles }) => {
         const { roomId, roomKey } = this.portal;
@@ -136,7 +135,8 @@ class Collab extends PureComponent<Props, CollabState> {
           throw new AbortError();
         }
 
-        return saveFilesToFirebase({
+        const storageBackend = await getStorageBackend();
+        return storageBackend.saveFilesToStorageBackend({
           prefix: `${FIREBASE_STORAGE_PREFIXES.collabFiles}/${roomId}`,
           files: await encodeFilesForUpload({
             files: addedFiles,
@@ -224,7 +224,7 @@ class Collab extends PureComponent<Props, CollabState> {
     if (
       this.isCollaborating() &&
       (this.fileManager.shouldPreventUnload(syncableElements) ||
-        !isSavedToFirebase(this.portal, syncableElements))
+      !storageBackend?.isSaved(this.portal, syncableElements))
     ) {
       // this won't run in time if user decides to leave the site, but
       //  the purpose is to run in immediately after user decides to stay
@@ -238,7 +238,8 @@ class Collab extends PureComponent<Props, CollabState> {
     syncableElements: readonly SyncableExcalidrawElement[],
   ) => {
     try {
-      const savedData = await saveToFirebase(
+      const storageBackend = await getStorageBackend();
+      const savedData = await storageBackend.saveToStorageBackend(
         this.portal,
         syncableElements,
         this.excalidrawAPI.getAppState(),
@@ -582,7 +583,8 @@ class Collab extends PureComponent<Props, CollabState> {
       this.excalidrawAPI.resetScene();
 
       try {
-        const elements = await loadFromFirebase(
+        const storageBackend = await getStorageBackend();
+        const elements = await storageBackend.loadFromStorageBackend(
           roomLinkData.roomId,
           roomLinkData.roomKey,
           this.portal.socket,
diff --git a/excalidraw-app/components/ExportToExcalidrawPlus.tsx b/excalidraw-app/components/ExportToExcalidrawPlus.tsx
index 0b577ad7..4c7ac6e6 100644
--- a/excalidraw-app/components/ExportToExcalidrawPlus.tsx
+++ b/excalidraw-app/components/ExportToExcalidrawPlus.tsx
@@ -2,7 +2,7 @@ import React from "react";
 import { Card } from "../../src/components/Card";
 import { ToolButton } from "../../src/components/ToolButton";
 import { serializeAsJSON } from "../../src/data/json";
-import { loadFirebaseStorage, saveFilesToFirebase } from "../data/firebase";
+import { loadFirebaseStorage } from "../data/firebase";
 import { FileId, NonDeletedExcalidrawElement } from "../../src/element/types";
 import { AppState, BinaryFileData, BinaryFiles } from "../../src/types";
 import { nanoid } from "nanoid";
@@ -15,6 +15,7 @@ import { MIME_TYPES } from "../../src/constants";
 import { trackEvent } from "../../src/analytics";
 import { getFrame } from "../../src/utils";
 import { ExcalidrawLogo } from "../../src/components/ExcalidrawLogo";
+import { getStorageBackend } from "../data/config";
 
 export const exportToExcalidrawPlus = async (
   elements: readonly NonDeletedExcalidrawElement[],
@@ -38,6 +39,7 @@ export const exportToExcalidrawPlus = async (
     },
   );
 
+  // FIXME StorageBackend not covered this case, we should remove the use-case in the web page
   await firebase
     .storage()
     .ref(`/migrations/scenes/${id}`)
@@ -62,7 +64,8 @@ export const exportToExcalidrawPlus = async (
       maxBytes: FILE_UPLOAD_MAX_BYTES,
     });
 
-    await saveFilesToFirebase({
+    const storageBackend = await getStorageBackend();
+    await storageBackend.saveFilesToStorageBackend({
       prefix: `/migrations/files/scenes/${id}`,
       files: filesToUpload,
     });
diff --git a/excalidraw-app/data/StorageBackend.ts b/excalidraw-app/data/StorageBackend.ts
new file mode 100644
index 00000000..56576395
--- /dev/null
+++ b/excalidraw-app/data/StorageBackend.ts
@@ -0,0 +1,45 @@
+import { SyncableExcalidrawElement } from ".";
+import { ExcalidrawElement, FileId } from "../../src/element/types";
+import { AppState, BinaryFileData } from "../../src/types";
+import Portal from "../collab/Portal";
+
+export interface StorageBackend {
+  isSaved: (portal: Portal, elements: readonly ExcalidrawElement[]) => boolean;
+  saveToStorageBackend: (
+    portal: Portal,
+    elements: readonly SyncableExcalidrawElement[],
+    appState: AppState,
+  ) => Promise<false | { reconciledElements: any }>;
+  loadFromStorageBackend: (
+    roomId: string,
+    roomKey: string,
+    socket: SocketIOClient.Socket | null,
+  ) => Promise<readonly ExcalidrawElement[] | null>;
+  saveFilesToStorageBackend: ({
+    prefix,
+    files,
+  }: {
+    prefix: string;
+    files: {
+      id: FileId;
+      buffer: Uint8Array;
+    }[];
+  }) => Promise<{
+    savedFiles: Map<FileId, true>;
+    erroredFiles: Map<FileId, true>;
+  }>;
+  loadFilesFromStorageBackend: (
+    prefix: string,
+    decryptionKey: string,
+    filesIds: readonly FileId[],
+  ) => Promise<{
+    loadedFiles: BinaryFileData[];
+    erroredFiles: Map<FileId, true>;
+  }>;
+}
+
+export interface StoredScene {
+  sceneVersion: number;
+  iv: Uint8Array;
+  ciphertext: ArrayBuffer;
+}
diff --git a/excalidraw-app/data/config.ts b/excalidraw-app/data/config.ts
new file mode 100644
index 00000000..0ff562d3
--- /dev/null
+++ b/excalidraw-app/data/config.ts
@@ -0,0 +1,54 @@
+import {
+    isSavedToFirebase,
+    loadFilesFromFirebase,
+    loadFromFirebase,
+    saveFilesToFirebase,
+    saveToFirebase,
+  } from "./firebase";
+  import {
+    isSavedToHttpStorage,
+    loadFilesFromHttpStorage,
+    loadFromHttpStorage,
+    saveFilesToHttpStorage,
+    saveToHttpStorage,
+  } from "./httpStorage";
+  import { StorageBackend } from "./StorageBackend";
+
+  const firebaseStorage: StorageBackend = {
+    isSaved: isSavedToFirebase,
+    saveToStorageBackend: saveToFirebase,
+    loadFromStorageBackend: loadFromFirebase,
+    saveFilesToStorageBackend: saveFilesToFirebase,
+    loadFilesFromStorageBackend: loadFilesFromFirebase,
+  };
+
+  const httpStorage: StorageBackend = {
+    isSaved: isSavedToHttpStorage,
+    saveToStorageBackend: saveToHttpStorage,
+    loadFromStorageBackend: loadFromHttpStorage,
+    saveFilesToStorageBackend: saveFilesToHttpStorage,
+    loadFilesFromStorageBackend: loadFilesFromHttpStorage,
+  };
+
+  const storageBackends = new Map<string, StorageBackend>()
+    .set("firebase", firebaseStorage)
+    .set("http", httpStorage);
+
+  export let storageBackend: StorageBackend | null = null;
+
+  export async function getStorageBackend() {
+    if (storageBackend) {
+      return storageBackend;
+    }
+
+    const storageBackendName = import.meta.env.VITE_APP_STORAGE_BACKEND || "";
+
+    if (storageBackends.has(storageBackendName)) {
+      storageBackend = storageBackends.get(storageBackendName) as StorageBackend;
+    } else {
+      console.warn("No storage backend found, default to firebase");
+      storageBackend = firebaseStorage;
+    }
+
+    return storageBackend;
+  }
diff --git a/excalidraw-app/data/firebase.ts b/excalidraw-app/data/firebase.ts
index 831213d6..4a776bb7 100644
--- a/excalidraw-app/data/firebase.ts
+++ b/excalidraw-app/data/firebase.ts
@@ -106,7 +106,7 @@ interface FirebaseStoredScene {
   ciphertext: firebase.default.firestore.Blob;
 }
 
-const encryptElements = async (
+export const encryptElements = async (
   key: string,
   elements: readonly ExcalidrawElement[],
 ): Promise<{ ciphertext: ArrayBuffer; iv: Uint8Array }> => {
@@ -117,7 +117,7 @@ const encryptElements = async (
   return { ciphertext: encryptedBuffer, iv };
 };
 
-const decryptElements = async (
+export const decryptElements = async (
   data: FirebaseStoredScene,
   roomKey: string,
 ): Promise<readonly ExcalidrawElement[]> => {
diff --git a/excalidraw-app/data/httpStorage.ts b/excalidraw-app/data/httpStorage.ts
new file mode 100644
index 00000000..70c33220
--- /dev/null
+++ b/excalidraw-app/data/httpStorage.ts
@@ -0,0 +1,290 @@
+// Inspired and partly copied from https://gitlab.com/kiliandeca/excalidraw-fork
+// MIT, Kilian Decaderincourt
+
+import { getSyncableElements, SyncableExcalidrawElement } from ".";
+import { MIME_TYPES } from "../../src/constants";
+import { decompressData } from "../../src/data/encode";
+import { encryptData, IV_LENGTH_BYTES } from "../../src/data/encryption";
+import { restoreElements } from "../../src/data/restore";
+import { getSceneVersion } from "../../src/element";
+import { ExcalidrawElement, FileId } from "../../src/element/types";
+import {
+  AppState,
+  BinaryFileData,
+  BinaryFileMetadata,
+  DataURL,
+} from "../../src/types";
+import Portal from "../collab/Portal";
+import { reconcileElements } from "../collab/reconciliation";
+import { decryptData } from "../../src/data/encryption";
+import { StoredScene } from "./StorageBackend";
+
+const HTTP_STORAGE_BACKEND_URL = import.meta.env.VITE_APP_HTTP_STORAGE_BACKEND_URL;
+const SCENE_VERSION_LENGTH_BYTES = 4;
+
+// There is a lot of intentional duplication with the firebase file
+// to prevent modifying upstream files and ease futur maintenance of this fork
+
+const httpStorageSceneVersionCache = new WeakMap<
+  SocketIOClient.Socket,
+  number
+>();
+
+export const isSavedToHttpStorage = (
+  portal: Portal,
+  elements: readonly ExcalidrawElement[],
+): boolean => {
+  if (portal.socket && portal.roomId && portal.roomKey) {
+    const sceneVersion = getSceneVersion(elements);
+
+    return httpStorageSceneVersionCache.get(portal.socket) === sceneVersion;
+  }
+  // if no room exists, consider the room saved so that we don't unnecessarily
+  // prevent unload (there's nothing we could do at that point anyway)
+  return true;
+};
+
+export const saveToHttpStorage = async (
+  portal: Portal,
+  elements: readonly SyncableExcalidrawElement[],
+  appState: AppState,
+) => {
+  const { roomId, roomKey, socket } = portal;
+  if (
+    // if no room exists, consider the room saved because there's nothing we can
+    // do at this point
+    !roomId ||
+    !roomKey ||
+    !socket ||
+    isSavedToHttpStorage(portal, elements)
+  ) {
+    return false;
+  }
+
+  const sceneVersion = getSceneVersion(elements);
+  const getResponse = await fetch(
+    `${HTTP_STORAGE_BACKEND_URL}/rooms/${roomId}`,
+  );
+
+  if (!getResponse.ok && getResponse.status !== 404) {
+    return false;
+  }
+  if (getResponse.status === 404) {
+    const result: boolean = await saveElementsToBackend(
+      roomKey,
+      roomId,
+      [...elements],
+      sceneVersion,
+    );
+    if (result) {
+      return {
+        reconciledElements: null,
+      };
+    }
+    return false;
+  }
+  // If room already exist, we compare scene versions to check
+  // if we're up to date before saving our scene
+  const buffer = await getResponse.arrayBuffer();
+  const sceneVersionFromRequest = parseSceneVersionFromRequest(buffer);
+  if (sceneVersionFromRequest >= sceneVersion) {
+    return false;
+  }
+
+  const existingElements = await getElementsFromBuffer(buffer, roomKey);
+  const reconciledElements = getSyncableElements(
+    reconcileElements(elements, existingElements, appState),
+  );
+
+  const result: boolean = await saveElementsToBackend(
+    roomKey,
+    roomId,
+    reconciledElements,
+    sceneVersion,
+  );
+
+  if (result) {
+    httpStorageSceneVersionCache.set(socket, sceneVersion);
+    return {
+      reconciledElements: elements,
+    };
+  }
+  return false;
+};
+
+export const loadFromHttpStorage = async (
+  roomId: string,
+  roomKey: string,
+  socket: SocketIOClient.Socket | null,
+): Promise<readonly ExcalidrawElement[] | null> => {
+  const HTTP_STORAGE_BACKEND_URL = import.meta.env.VITE_APP_HTTP_STORAGE_BACKEND_URL;
+  const getResponse = await fetch(
+    `${HTTP_STORAGE_BACKEND_URL}/rooms/${roomId}`,
+  );
+
+  const buffer = await getResponse.arrayBuffer();
+  const elements = await getElementsFromBuffer(buffer, roomKey);
+
+  if (socket) {
+    httpStorageSceneVersionCache.set(socket, getSceneVersion(elements));
+  }
+
+  return restoreElements(elements, null);
+};
+
+const getElementsFromBuffer = async (
+  buffer: ArrayBuffer,
+  key: string,
+): Promise<readonly ExcalidrawElement[]> => {
+  // Buffer should contain both the IV (fixed length) and encrypted data
+  const sceneVersion = parseSceneVersionFromRequest(buffer);
+  const iv = new Uint8Array(
+    buffer.slice(
+      SCENE_VERSION_LENGTH_BYTES,
+      IV_LENGTH_BYTES + SCENE_VERSION_LENGTH_BYTES,
+    ),
+  );
+  const encrypted = buffer.slice(
+    IV_LENGTH_BYTES + SCENE_VERSION_LENGTH_BYTES,
+    buffer.byteLength,
+  );
+
+  return await decryptElements(
+    { sceneVersion, ciphertext: encrypted, iv },
+    key,
+  );
+};
+
+export const saveFilesToHttpStorage = async ({
+  prefix,
+  files,
+}: {
+  prefix: string;
+  files: { id: FileId; buffer: Uint8Array }[];
+}) => {
+  const erroredFiles = new Map<FileId, true>();
+  const savedFiles = new Map<FileId, true>();
+
+  const HTTP_STORAGE_BACKEND_URL =import.meta.env.VITE_APP_HTTP_STORAGE_BACKEND_URL;
+
+  await Promise.all(
+    files.map(async ({ id, buffer }) => {
+      try {
+        const payloadBlob = new Blob([buffer]);
+        const payload = await new Response(payloadBlob).arrayBuffer();
+        await fetch(`${HTTP_STORAGE_BACKEND_URL}/files/${id}`, {
+          method: "PUT",
+          body: payload,
+        });
+        savedFiles.set(id, true);
+      } catch (error: any) {
+        erroredFiles.set(id, true);
+      }
+    }),
+  );
+
+  return { savedFiles, erroredFiles };
+};
+
+export const loadFilesFromHttpStorage = async (
+  prefix: string,
+  decryptionKey: string,
+  filesIds: readonly FileId[],
+) => {
+  const loadedFiles: BinaryFileData[] = [];
+  const erroredFiles = new Map<FileId, true>();
+
+  //////////////
+  await Promise.all(
+    [...new Set(filesIds)].map(async (id) => {
+      try {
+        const HTTP_STORAGE_BACKEND_URL = import.meta.env.VITE_APP_HTTP_STORAGE_BACKEND_URL;
+        const response = await fetch(`${HTTP_STORAGE_BACKEND_URL}/files/${id}`);
+        if (response.status < 400) {
+          const arrayBuffer = await response.arrayBuffer();
+
+          const { data, metadata } = await decompressData<BinaryFileMetadata>(
+            new Uint8Array(arrayBuffer),
+            {
+              decryptionKey,
+            },
+          );
+
+          const dataURL = new TextDecoder().decode(data) as DataURL;
+
+          loadedFiles.push({
+            mimeType: metadata.mimeType || MIME_TYPES.binary,
+            id,
+            dataURL,
+            created: metadata?.created || Date.now(),
+          });
+        } else {
+          erroredFiles.set(id, true);
+        }
+      } catch (error: any) {
+        erroredFiles.set(id, true);
+        console.error(error);
+      }
+    }),
+  );
+  //////
+
+  return { loadedFiles, erroredFiles };
+};
+
+const saveElementsToBackend = async (
+  roomKey: string,
+  roomId: string,
+  elements: SyncableExcalidrawElement[],
+  sceneVersion: number,
+) => {
+  const { ciphertext, iv } = await encryptElements(roomKey, elements);
+
+  // Concatenate Scene Version, IV with encrypted data (IV does not have to be secret).
+  const numberBuffer = new ArrayBuffer(4);
+  const numberView = new DataView(numberBuffer);
+  numberView.setUint32(0, sceneVersion, false);
+  const sceneVersionBuffer = numberView.buffer;
+  const payloadBlob = await new Response(
+    new Blob([sceneVersionBuffer, iv.buffer, ciphertext]),
+  ).arrayBuffer();
+  const putResponse = await fetch(
+    `${HTTP_STORAGE_BACKEND_URL}/rooms/${roomId}`,
+    {
+      method: "PUT",
+      body: payloadBlob,
+    },
+  );
+
+  return putResponse.ok;
+};
+
+const parseSceneVersionFromRequest = (buffer: ArrayBuffer) => {
+  const view = new DataView(buffer);
+  return view.getUint32(0, false);
+};
+
+const decryptElements = async (
+  data: StoredScene,
+  roomKey: string,
+): Promise<readonly ExcalidrawElement[]> => {
+  const ciphertext = data.ciphertext;
+  const iv = data.iv;
+
+  const decrypted = await decryptData(iv, ciphertext, roomKey);
+  const decodedData = new TextDecoder("utf-8").decode(
+    new Uint8Array(decrypted),
+  );
+  return JSON.parse(decodedData);
+};
+
+const encryptElements = async (
+  key: string,
+  elements: readonly ExcalidrawElement[],
+): Promise<{ ciphertext: ArrayBuffer; iv: Uint8Array }> => {
+  const json = JSON.stringify(elements);
+  const encoded = new TextEncoder().encode(json);
+  const { encryptedBuffer, iv } = await encryptData(key, encoded);
+
+  return { ciphertext: encryptedBuffer, iv };
+};
diff --git a/excalidraw-app/data/index.ts b/excalidraw-app/data/index.ts
index 3870ca37..a2dc7ed9 100644
--- a/excalidraw-app/data/index.ts
+++ b/excalidraw-app/data/index.ts
@@ -23,8 +23,8 @@ import {
   FILE_UPLOAD_MAX_BYTES,
   ROOM_ID_BYTES,
 } from "../app_constants";
+import { getStorageBackend } from "./config";
 import { encodeFilesForUpload } from "./FileManager";
-import { saveFilesToFirebase } from "./firebase";
 
 export type SyncableExcalidrawElement = ExcalidrawElement & {
   _brand: "SyncableExcalidrawElement";
@@ -61,7 +61,7 @@ const generateRoomId = async () => {
  * from upstream is to allow changing the params immediately when needed without
  * having to wait for clients to update the SW.
  *
- * If REACT_APP_WS_SERVER_URL env is set, we use that instead (useful for forks)
+ * If VITE_APP_WS_SERVER_URL env is set, we use that instead (useful for forks)
  */
 export const getCollabServer = async (): Promise<{
   url: string;
@@ -326,7 +326,8 @@ export const exportToBackend = async (
       url.hash = `json=${json.id},${encryptionKey}`;
       const urlString = url.toString();
 
-      await saveFilesToFirebase({
+      const storageBackend = await getStorageBackend();
+      await storageBackend.saveFilesToStorageBackend({
         prefix: `/files/shareLinks/${json.id}`,
         files: filesToUpload,
       });
diff --git a/excalidraw-app/index.tsx b/excalidraw-app/index.tsx
index 9156d501..22a58a8d 100644
--- a/excalidraw-app/index.tsx
+++ b/excalidraw-app/index.tsx
@@ -80,7 +80,6 @@ import {
 import { updateStaleImageStatuses } from "./data/FileManager";
 import { newElementWith } from "../src/element/mutateElement";
 import { isInitializedImageElement } from "../src/element/typeChecks";
-import { loadFilesFromFirebase } from "./data/firebase";
 import { LocalData } from "./data/LocalData";
 import { isBrowserStorageStateNewer } from "./data/tabSync";
 import clsx from "clsx";
@@ -98,6 +97,7 @@ import { appJotaiStore } from "./app-jotai";
 
 import "./index.scss";
 import { ResolutionType } from "../src/utility-types";
+import { storageBackend } from "./data/config";
 import { ShareableLinkDialog } from "../src/components/ShareableLinkDialog";
 import { openConfirmModal } from "../src/components/OverwriteConfirm/OverwriteConfirmState";
 import { OverwriteConfirmDialog } from "../src/components/OverwriteConfirm/OverwriteConfirm";
@@ -352,16 +352,18 @@ const ExcalidrawWrapper = () => {
           }, [] as FileId[]) || [];
 
         if (data.isExternalScene) {
-          loadFilesFromFirebase(
-            `${FIREBASE_STORAGE_PREFIXES.shareLinkFiles}/${data.id}`,
-            data.key,
-            fileIds,
-          ).then(({ loadedFiles, erroredFiles }) => {
-            excalidrawAPI.addFiles(loadedFiles);
-            updateStaleImageStatuses({
-              excalidrawAPI,
-              erroredFiles,
-              elements: excalidrawAPI.getSceneElementsIncludingDeleted(),
+          storageBackend
+            ?.loadFilesFromStorageBackend(
+              `${FIREBASE_STORAGE_PREFIXES.shareLinkFiles}/${data.id}`,
+              data.key,
+              fileIds,
+            )
+            .then(({ loadedFiles, erroredFiles }) => {
+              excalidrawAPI.addFiles(loadedFiles);
+              updateStaleImageStatuses({
+                excalidrawAPI,
+                erroredFiles,
+                elements: excalidrawAPI.getSceneElementsIncludingDeleted(),
             });
           });
         } else if (isInitialLoad) {
diff --git a/src/actions/actionProperties.tsx b/src/actions/actionProperties.tsx
index 1a05bc7c..5e0d5bc8 100644
--- a/src/actions/actionProperties.tsx
+++ b/src/actions/actionProperties.tsx
@@ -694,7 +694,7 @@ export const actionChangeFontFamily = register({
       icon: JSX.Element;
     }[] = [
       {
-        value: FONT_FAMILY.Virgil,
+        value: FONT_FAMILY["Virgil, HanziPen SC, KaiTi"],
         text: t("labels.handDrawn"),
         icon: FreedrawIcon,
       },
diff --git a/src/constants.ts b/src/constants.ts
index 90fc6675..fd669b02 100644
--- a/src/constants.ts
+++ b/src/constants.ts
@@ -102,7 +102,7 @@ export const CLASSES = {
 
 // 1-based in case we ever do `if(element.fontFamily)`
 export const FONT_FAMILY = {
-  Virgil: 1,
+  "Virgil, HanziPen SC, KaiTi": 1,
   Helvetica: 2,
   Cascadia: 3,
 };
@@ -127,7 +127,7 @@ export const WINDOWS_EMOJI_FALLBACK_FONT = "Segoe UI Emoji";
 
 export const MIN_FONT_SIZE = 1;
 export const DEFAULT_FONT_SIZE = 20;
-export const DEFAULT_FONT_FAMILY: FontFamilyValues = FONT_FAMILY.Virgil;
+export const DEFAULT_FONT_FAMILY: FontFamilyValues = FONT_FAMILY["Virgil, HanziPen SC, KaiTi"];
 export const DEFAULT_TEXT_ALIGN = "left";
 export const DEFAULT_VERTICAL_ALIGN = "top";
 export const DEFAULT_VERSION = "{version}";
diff --git a/src/element/newElement.test.ts b/src/element/newElement.test.ts
index 19761231..4f70c412 100644
--- a/src/element/newElement.test.ts
+++ b/src/element/newElement.test.ts
@@ -79,7 +79,7 @@ describe("duplicating single elements", () => {
       opacity: 100,
       text: "hello",
       fontSize: 20,
-      fontFamily: FONT_FAMILY.Virgil,
+      fontFamily: FONT_FAMILY["Virgil, HanziPen SC, KaiTi"],
       textAlign: "left",
       verticalAlign: "top",
     });
diff --git a/src/element/textElement.ts b/src/element/textElement.ts
index ce80d0eb..92e58d78 100644
--- a/src/element/textElement.ts
+++ b/src/element/textElement.ts
@@ -967,7 +967,7 @@ export const isMeasureTextSupported = () => {
 const DEFAULT_LINE_HEIGHT = {
   // ~1.25 is the average for Virgil in WebKit and Blink.
   // Gecko (FF) uses ~1.28.
-  [FONT_FAMILY.Virgil]: 1.25 as ExcalidrawTextElement["lineHeight"],
+  [FONT_FAMILY["Virgil, HanziPen SC, KaiTi"]]: 1.25 as ExcalidrawTextElement["lineHeight"],
   // ~1.15 is the average for Virgil in WebKit and Blink.
   // Gecko if all over the place.
   [FONT_FAMILY.Helvetica]: 1.15 as ExcalidrawTextElement["lineHeight"],
diff --git a/src/element/textWysiwyg.test.tsx b/src/element/textWysiwyg.test.tsx
index fc1e8cf2..0fcea0a1 100644
--- a/src/element/textWysiwyg.test.tsx
+++ b/src/element/textWysiwyg.test.tsx
@@ -798,7 +798,9 @@ describe("textWysiwyg", () => {
       await new Promise((r) => setTimeout(r, 0));
       updateTextEditor(editor, "Hello World!");
       editor.blur();
-      expect(text.fontFamily).toEqual(FONT_FAMILY.Virgil);
+      expect(text.fontFamily).toEqual(
+        FONT_FAMILY["Virgil, HanziPen SC, KaiTi"],
+      );
       UI.clickTool("text");
 
       mouse.clickAt(
@@ -823,7 +825,7 @@ describe("textWysiwyg", () => {
       });
       expect(
         (h.elements[1] as ExcalidrawTextElementWithContainer).fontFamily,
-      ).toEqual(FONT_FAMILY.Virgil);
+      ).toEqual(FONT_FAMILY["Virgil, HanziPen SC, KaiTi"]);
 
       //redo
       Keyboard.withModifierKeys({ ctrl: true, shift: true }, () => {
diff --git a/src/tests/data/restore.test.ts b/src/tests/data/restore.test.ts
index 0019b0e8..492143a2 100644
--- a/src/tests/data/restore.test.ts
+++ b/src/tests/data/restore.test.ts
@@ -58,7 +58,7 @@ describe("restoreElements", () => {
     const textElement = API.createElement({
       type: "text",
       fontSize: 14,
-      fontFamily: FONT_FAMILY.Virgil,
+      fontFamily: FONT_FAMILY["Virgil, HanziPen SC, KaiTi"],
       text: "text",
       textAlign: "center",
       verticalAlign: "middle",
diff --git a/src/tests/regressionTests.test.tsx b/src/tests/regressionTests.test.tsx
index 8389dd42..d1203e49 100644
--- a/src/tests/regressionTests.test.tsx
+++ b/src/tests/regressionTests.test.tsx
@@ -644,7 +644,9 @@ describe("regression tests", () => {
 
   it("updates fontSize & fontFamily appState", () => {
     UI.clickTool("text");
-    expect(h.state.currentItemFontFamily).toEqual(FONT_FAMILY.Virgil);
+    expect(h.state.currentItemFontFamily).toEqual(
+      FONT_FAMILY["Virgil, HanziPen SC, KaiTi"],
+    );
     fireEvent.click(screen.getByTitle(/code/i));
     expect(h.state.currentItemFontFamily).toEqual(FONT_FAMILY.Cascadia);
   });
diff --git a/src/vite-env.d.ts b/src/vite-env.d.ts
index cd4030b1..ba0e23c4 100644
--- a/src/vite-env.d.ts
+++ b/src/vite-env.d.ts
@@ -14,6 +14,8 @@ interface ImportMetaEnv {
 
   // collaboration WebSocket server (https: string
   VITE_APP_WS_SERVER_URL: string;
+  VITE_APP_HTTP_STORAGE_BACKEND_URL: string;
+  VITE_APP_STORAGE_BACKEND: string;
 
   // set this only if using the collaboration workflow we use on excalidraw.com
   VITE_APP_PORTAL_URL: string;
-- 
2.34.1

